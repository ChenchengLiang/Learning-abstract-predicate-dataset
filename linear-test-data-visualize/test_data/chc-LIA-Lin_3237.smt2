; seahorn-benchmarks/./sv_comp_flat_small/loop-acceleration/multivar_true-unreach-call1.c.flat_000.smt2
(set-logic HORN)

(declare-fun |main_1| ( Int Int Int ) Bool)

(assert
  (forall ( (A Int) (B Int) (v_2 Int) ) 
    (=>
      (and
        (and true (= 0 v_2))
      )
      (main_1 v_2 A B)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (C Bool) (D Int) (E Int) (F Bool) (G Int) (H Bool) (I Bool) (J Bool) (K Bool) (L Int) (M Int) (v_13 Int) (v_14 Int) ) 
    (=>
      (and
        (main_1 v_13 D E)
        (and (= 0 v_13)
     (or (not H) (not K) (= B M))
     (or (not H) (not K) (= A L))
     (or (not H) (not K) (= M G))
     (or (not H) (not K) (= L G))
     (or C (not F) (not I))
     (or (not J) (and H K))
     (or (not H) (and F I))
     (= J true)
     (= C (not (<= 1024 G)))
     (= 1 v_14))
      )
      (main_1 v_14 B A)
    )
  )
)
(assert
  (forall ( (A Bool) (B Bool) (C Bool) (D Int) (E Int) (F Bool) (G Int) (H Bool) (I Bool) (J Int) (K Int) (L Int) (M Int) (N Bool) (O Bool) (v_15 Int) (v_16 Int) ) 
    (=>
      (and
        (main_1 v_15 D E)
        (and (= 0 v_15)
     (or (not F) (not I) (= M K))
     (or (not F) (not I) (= L J))
     (or (not F) (not I) (= K G))
     (or (not F) (not I) (= J G))
     (or (not C) (not F) (not I))
     (or (not N) (and H O))
     (or (not H) (= B (not A)))
     (or (not H) (= A (= M L)))
     (or (not H) (and F I))
     (or (not H) B)
     (= N true)
     (= C (not (<= 1024 G)))
     (= 2 v_16))
      )
      (main_1 v_16 D E)
    )
  )
)
(assert
  (forall ( (A Bool) (B Int) (C Int) (D Int) (E Int) (F Bool) (G Int) (H Int) (I Int) (J Int) (K Bool) (L Bool) (v_12 Int) (v_13 Int) ) 
    (=>
      (and
        (main_1 v_12 D E)
        (and (= 1 v_12)
     (= I (+ 1 D))
     (= A (not (<= 1024 I)))
     (or (not F) (not L) (= H I))
     (or (not F) (not L) (= G J))
     (or (not F) (not L) (= B G))
     (or (not F) (not L) (= C H))
     (or (not F) (not L) A)
     (or (not K) (and F L))
     (= K true)
     (= J (+ 1 E))
     (= 1 v_13))
      )
      (main_1 v_13 C B)
    )
  )
)
(assert
  (forall ( (A Bool) (B Bool) (C Bool) (D Int) (E Int) (F Int) (G Int) (H Bool) (I Bool) (J Int) (K Int) (L Int) (M Int) (N Bool) (O Bool) (P Int) (Q Int) (R Bool) (S Bool) (T Int) (U Int) (V Bool) (v_22 Int) (v_23 Int) ) 
    (=>
      (and
        (main_1 v_22 F G)
        (and (= 1 v_22)
     (= P (+ 1 F))
     (= C (not (<= 1024 P)))
     (or (not S) (not H) (= E U))
     (or (not S) (not H) (= D T))
     (or (not S) (not H) (= T Q))
     (or (not S) (not H) (= U P))
     (or (not S) (not H) (not C))
     (or (not R) (not V) (= L J))
     (or (not R) (not V) (= M K))
     (or (not R) (not V) (= K E))
     (or (not R) (not V) (= J D))
     (or (not N) (and O I))
     (or (not I) (= B (not A)))
     (or (not I) (= A (= M L)))
     (or (not I) (and R V))
     (or (not I) B)
     (or (not R) (and S H))
     (= N true)
     (= Q (+ 1 G))
     (= 2 v_23))
      )
      (main_1 v_23 F G)
    )
  )
)
(assert
  (forall ( (A Int) (B Int) (v_2 Int) ) 
    (=>
      (and
        (main_1 v_2 A B)
        (= 2 v_2)
      )
      false
    )
  )
)

(check-sat)
(exit)
